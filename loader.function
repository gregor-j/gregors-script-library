################################################################################
# shell script library                                                         #
# FILE: loader.function                                                        #
################################################################################

# ERROR CODES ##################################################################
export RETURN_OK=0
export RETURN_NOT_OK=1
export ERR_NOT_SET=128
export ERR_NOT_FOUND=129
export ERR_PERMISSION=130
export ERR_UNKNOWN=131
# PRINT TO STDERR ##############################################################
# Print the text to STDERR instead of STDOUT.
# param 1 (string) The text to print to STDERR.
err() {
    printf '\033[31m%s\033[0m\n' "${1}" >&2
}
# PRINT WITHOUT INTERPRETATION #################################################
# Just print the contents all parameters.
prnt() {
    printf '%s' "$@"
}
# Print the contents of all parameters and append a newline.
prntln() {
    printf '%s\n' "$@"
}
# SCRIPT LIBRARY VARIABLE ######################################################
if [ -z "${SCRIPT_LIBRARY}" ]; then
    err "ERROR: SCRIPT_LIBRARY variable not defined!"
    exit $ERR_NOT_SET # Exit should be a privilege of the loader!
elif [ -d "${SCRIPT_LIBRARY}" ]; then
    SCRIPT_LIBRARY="${SCRIPT_LIBRARY%/}"
else
    err "ERROR: ${SCRIPT_LIBRARY} doesn't exist!"
    exit $ERR_NOT_FOUND
fi
# LOADED SCRIPTS VARIABLE ######################################################
# Variable holding a list of loaded scripts.
SSL_LOADED="${SSL_LOADED:-loader}"
# CONFIGURATION ROOT DIRECTORY #################################################
# This directory is supposed to contain configuration files for our scripts.
SSL_CONFIG_DIR="${HOME}/.config/shell-script-library"
[ -d "${SSL_CONFIG_DIR}" ] || mkdir -p "${SSL_CONFIG_DIR}"
# LOADER #######################################################################
# Load a script from the library.
#
# Usage: load <name> [<name> [...]]
#
# Example: load common
#
load() {
    SSLLOAD=""
    for SSLLOAD in "$@"; do
        isloaded "${SSLLOAD}" || {
            SSL_LOADED=$(prntln "${SSL_LOADED}" "${SSLLOAD}")
        }
        # shellcheck source=/dev/null
        . "${SCRIPT_LIBRARY}/${SSLLOAD}.function" || {
            SSL_LOADED=$(prntln "${SSL_LOADED}" | sed '$ d')
            unset SSLLOAD
            return ${RETURN_NOT_OK}
        }
    done
    unset SSLLOAD
    return ${RETURN_OK}
}
# List all loaded scripts.
loaded() {
    prntln "${SSL_LOADED}"
}
# Determine whether a script has been loaded.
# param 1 Name of the script to check for.
isloaded() {
    loaded | grep -qx "${1}"
}
